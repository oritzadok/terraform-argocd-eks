[cloudshell-user@ip-xxx terraform-argocd-eks]$ bash deploy_infra.sh 
Initializing the backend...
Initializing provider plugins...
- Finding hashicorp/aws versions matching "~> 4.16"...
- Finding latest version of hashicorp/helm...
- Installing hashicorp/aws v4.67.0...
- Installed hashicorp/aws v4.67.0 (signed by HashiCorp)
- Installing hashicorp/helm v2.16.1...
- Installed hashicorp/helm v2.16.1 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_eks_cluster.cluster will be created
  + resource "aws_eks_cluster" "cluster" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + cluster_id            = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = "ori-cluster"
      + platform_version      = (known after apply)
      + role_arn              = (known after apply)
      + status                = (known after apply)
      + tags_all              = (known after apply)
      + version               = (known after apply)

      + kubernetes_network_config (known after apply)

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + subnet_ids                = [
              + "subnet-xxxxxxxxxxxxxxxxx",
              + "subnet-xxxxxxxxxxxxxxxxx",
              + "subnet-xxxxxxxxxxxxxxxxx",
            ]
          + vpc_id                    = (known after apply)
        }
    }

  # aws_eks_node_group.node_group will be created
  + resource "aws_eks_node_group" "node_group" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = (known after apply)
      + cluster_name           = "ori-cluster"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = (known after apply)
      + node_group_name        = "ori-node-group"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = [
          + "subnet-xxxxxxxxxxxxxxxxx",
          + "subnet-xxxxxxxxxxxxxxxxx",
          + "subnet-xxxxxxxxxxxxxxxxx",
        ]
      + tags_all               = (known after apply)
      + version                = (known after apply)

      + scaling_config {
          + desired_size = 1
          + max_size     = 3
          + min_size     = 1
        }

      + update_config {
          + max_unavailable = 1
        }
    }

  # aws_iam_role.cluster_role will be created
  + resource "aws_iam_role" "cluster_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "sts:AssumeRole",
                          + "sts:TagSession",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "AmazonEKSClusterRole"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role.node_role will be created
  + resource "aws_iam_role" "node_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "AmazonEKSNodeRole"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy_attachment.cluster_role_AmazonEKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "cluster_role_AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "AmazonEKSClusterRole"
    }

  # aws_iam_role_policy_attachment.node_role_AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "node_role_AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "AmazonEKSNodeRole"
    }

  # aws_iam_role_policy_attachment.node_role_AmazonEKSWorkerNodePolicy will be created
  + resource "aws_iam_role_policy_attachment" "node_role_AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "AmazonEKSNodeRole"
    }

  # aws_iam_role_policy_attachment.node_role_AmazonEKS_CNI_Policy will be created
  + resource "aws_iam_role_policy_attachment" "node_role_AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "AmazonEKSNodeRole"
    }

  # helm_release.argocd will be created
  + resource "helm_release" "argocd" {
      + atomic                     = false
      + chart                      = "argo-cd"
      + cleanup_on_fail            = false
      + create_namespace           = true
      + dependency_update          = false
      + disable_crd_hooks          = false
      + disable_openapi_validation = false
      + disable_webhooks           = false
      + force_update               = false
      + id                         = (known after apply)
      + lint                       = false
      + manifest                   = (known after apply)
      + max_history                = 0
      + metadata                   = (known after apply)
      + name                       = "argocd"
      + namespace                  = "argocd"
      + pass_credentials           = false
      + recreate_pods              = false
      + render_subchart_notes      = true
      + replace                    = false
      + repository                 = "https://argoproj.github.io/argo-helm"
      + reset_values               = false
      + reuse_values               = false
      + skip_crds                  = false
      + status                     = "deployed"
      + timeout                    = 300
      + verify                     = false
      + version                    = "7.7.9"
      + wait                       = true
      + wait_for_jobs              = false

      + set {
          + name  = "server.service.type"
          + value = "LoadBalancer"
            # (1 unchanged attribute hidden)
        }
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + aws_region       = "us-east-1"
  + eks_cluster_name = "ori-cluster"
aws_iam_role.node_role: Creating...
aws_iam_role.cluster_role: Creating...
aws_iam_role.node_role: Creation complete after 0s [id=AmazonEKSNodeRole]
aws_iam_role_policy_attachment.node_role_AmazonEC2ContainerRegistryReadOnly: Creating...
aws_iam_role_policy_attachment.node_role_AmazonEKSWorkerNodePolicy: Creating...
aws_iam_role_policy_attachment.node_role_AmazonEKS_CNI_Policy: Creating...
aws_iam_role.cluster_role: Creation complete after 0s [id=AmazonEKSClusterRole]
aws_iam_role_policy_attachment.cluster_role_AmazonEKSClusterPolicy: Creating...
aws_iam_role_policy_attachment.node_role_AmazonEKS_CNI_Policy: Creation complete after 0s [id=AmazonEKSNodeRole-20241212003521217500000001]
aws_iam_role_policy_attachment.node_role_AmazonEC2ContainerRegistryReadOnly: Creation complete after 0s [id=AmazonEKSNodeRole-20241212003521261700000002]
aws_iam_role_policy_attachment.cluster_role_AmazonEKSClusterPolicy: Creation complete after 0s [id=AmazonEKSClusterRole-20241212003521307500000003]
aws_eks_cluster.cluster: Creating...
aws_iam_role_policy_attachment.node_role_AmazonEKSWorkerNodePolicy: Creation complete after 0s [id=AmazonEKSNodeRole-20241212003521405500000004]
aws_eks_cluster.cluster: Still creating... [10s elapsed]
aws_eks_cluster.cluster: Still creating... [20s elapsed]
aws_eks_cluster.cluster: Still creating... [30s elapsed]
aws_eks_cluster.cluster: Still creating... [40s elapsed]
aws_eks_cluster.cluster: Still creating... [50s elapsed]
aws_eks_cluster.cluster: Still creating... [1m0s elapsed]
aws_eks_cluster.cluster: Still creating... [1m10s elapsed]
aws_eks_cluster.cluster: Still creating... [1m20s elapsed]
aws_eks_cluster.cluster: Still creating... [1m30s elapsed]
aws_eks_cluster.cluster: Still creating... [1m40s elapsed]
aws_eks_cluster.cluster: Still creating... [1m50s elapsed]
aws_eks_cluster.cluster: Still creating... [2m0s elapsed]
aws_eks_cluster.cluster: Still creating... [2m10s elapsed]
aws_eks_cluster.cluster: Still creating... [2m20s elapsed]
aws_eks_cluster.cluster: Still creating... [2m30s elapsed]
aws_eks_cluster.cluster: Still creating... [2m40s elapsed]
aws_eks_cluster.cluster: Still creating... [2m50s elapsed]
aws_eks_cluster.cluster: Still creating... [3m0s elapsed]
aws_eks_cluster.cluster: Still creating... [3m10s elapsed]
aws_eks_cluster.cluster: Still creating... [3m20s elapsed]
aws_eks_cluster.cluster: Still creating... [3m30s elapsed]
aws_eks_cluster.cluster: Still creating... [3m40s elapsed]
aws_eks_cluster.cluster: Still creating... [3m50s elapsed]
aws_eks_cluster.cluster: Still creating... [4m0s elapsed]
aws_eks_cluster.cluster: Still creating... [4m10s elapsed]
aws_eks_cluster.cluster: Still creating... [4m20s elapsed]
aws_eks_cluster.cluster: Still creating... [4m30s elapsed]
aws_eks_cluster.cluster: Still creating... [4m40s elapsed]
aws_eks_cluster.cluster: Still creating... [4m50s elapsed]
aws_eks_cluster.cluster: Still creating... [5m0s elapsed]
aws_eks_cluster.cluster: Still creating... [5m10s elapsed]
aws_eks_cluster.cluster: Still creating... [5m20s elapsed]
aws_eks_cluster.cluster: Still creating... [5m30s elapsed]
aws_eks_cluster.cluster: Still creating... [5m40s elapsed]
aws_eks_cluster.cluster: Still creating... [5m50s elapsed]
aws_eks_cluster.cluster: Still creating... [6m0s elapsed]
aws_eks_cluster.cluster: Still creating... [6m10s elapsed]
aws_eks_cluster.cluster: Still creating... [6m20s elapsed]
aws_eks_cluster.cluster: Still creating... [6m30s elapsed]
aws_eks_cluster.cluster: Still creating... [6m40s elapsed]
aws_eks_cluster.cluster: Still creating... [6m50s elapsed]
aws_eks_cluster.cluster: Still creating... [7m0s elapsed]
aws_eks_cluster.cluster: Still creating... [7m10s elapsed]
aws_eks_cluster.cluster: Still creating... [7m20s elapsed]
aws_eks_cluster.cluster: Still creating... [7m30s elapsed]
aws_eks_cluster.cluster: Still creating... [7m40s elapsed]
aws_eks_cluster.cluster: Still creating... [7m50s elapsed]
aws_eks_cluster.cluster: Still creating... [8m0s elapsed]
aws_eks_cluster.cluster: Still creating... [8m10s elapsed]
aws_eks_cluster.cluster: Still creating... [8m20s elapsed]
aws_eks_cluster.cluster: Still creating... [8m30s elapsed]
aws_eks_cluster.cluster: Still creating... [8m40s elapsed]
aws_eks_cluster.cluster: Still creating... [8m50s elapsed]
aws_eks_cluster.cluster: Still creating... [9m0s elapsed]
aws_eks_cluster.cluster: Still creating... [9m10s elapsed]
aws_eks_cluster.cluster: Still creating... [9m20s elapsed]
aws_eks_cluster.cluster: Still creating... [9m30s elapsed]
aws_eks_cluster.cluster: Still creating... [9m40s elapsed]
aws_eks_cluster.cluster: Creation complete after 9m44s [id=ori-cluster]
aws_eks_node_group.node_group: Creating...
aws_eks_node_group.node_group: Still creating... [10s elapsed]
aws_eks_node_group.node_group: Still creating... [20s elapsed]
aws_eks_node_group.node_group: Still creating... [30s elapsed]
aws_eks_node_group.node_group: Still creating... [40s elapsed]
aws_eks_node_group.node_group: Still creating... [50s elapsed]
aws_eks_node_group.node_group: Still creating... [1m0s elapsed]
aws_eks_node_group.node_group: Still creating... [1m10s elapsed]
aws_eks_node_group.node_group: Still creating... [1m20s elapsed]
aws_eks_node_group.node_group: Still creating... [1m30s elapsed]
aws_eks_node_group.node_group: Still creating... [1m40s elapsed]
aws_eks_node_group.node_group: Creation complete after 1m46s [id=ori-cluster:ori-node-group]
helm_release.argocd: Creating...
helm_release.argocd: Still creating... [10s elapsed]
helm_release.argocd: Still creating... [20s elapsed]
helm_release.argocd: Still creating... [30s elapsed]
helm_release.argocd: Still creating... [40s elapsed]
helm_release.argocd: Creation complete after 47s [id=argocd]

Apply complete! Resources: 9 added, 0 changed, 0 destroyed.

Outputs:

aws_region = "us-east-1"
eks_cluster_name = "ori-cluster"
Added new context arn:aws:eks:us-east-1:xxxxxxxxxxxx:cluster/ori-cluster to /home/cloudshell-user/.kube/config
application.argoproj.io/my-app created